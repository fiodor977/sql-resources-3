--Cursor que creas cuando una consulta devuelve más de un dato

-- Recorre todas las filas de la tabla artículo y devuelve ciertas columnas. Un ejemplo por tipo de bucle.

--Usando loop
DECLARE
  -- Declara un cursor que tiene más de un registro de resultados
  CURSOR C1 IS
  SELECT * FROM ARTICULO;

  // Declara un fila de la tabla ARTICULO
  ART ARTICULO%ROWTYPE;

BEGIN
  OPEN C1;
    LOOP
      -- Obtiene una fila del registro y la mete en ART
        FETCH C1 INTO ART;
        
        -- Sale del bucle cuando no hay más resultados
        EXIT WHEN C1%NOTFOUND;
          DBMS_OUTPUT.PUT_LINE(ART.CATEGORIA || ' ' || ART.REFERENCIA);

    END LOOP;
  CLOSE C1;
END;

--Usando for
DECLARE
  CURSOR C1 IS
  SELECT * FROM ARTICULO;

  ART ARTICULO%ROWTYPE;

BEGIN

FOR ART IN C1 LOOP

        DBMS_OUTPUT.PUT_LINE(ART.CATEGORIA || ' ' || ART.REFERENCIA);

END LOOP;

END;

--Usando while
DECLARE
  CURSOR C1 IS
  SELECT * FROM ARTICULO;

ART ARTICULO%ROWTYPE;

BEGIN
OPEN C1;
  -- Obtiene una fila del resultado del cursor
  FETCH C1 INTO ART;
  -- Se ejecuta el bucle mientras haya resultados
  WHILE C1%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(ART.CATEGORIA || ' ' || ART.REFERENCIA);
        -- Obtiene el siguiente registro para la siguiente iteracción del bucle
        FETCH C1 INTO ART;
  END LOOP;
CLOSE C1;
END;

----------------------------------------------------------------
CURSORES CON PARÁMETROS
----

DECLARE
  CURSOR c1 (importe_minimo NUMBER, fecha TIMESTAMP)
  IS SELECT npedido, cliente, fecha, total_pedido
  FROM pedido
  WHERE total_pedido > importe_minimo AND fecha = c1.fecha;
  numero pedido.npedido%TYPE;
  
  cli pedido.cliente%TYPE;
  fpedido pedido.fecha%TYPE;
  total pedido.total_pedido%TYPE;
  dto NUMBER(3,2);
  total_descuento NUMBER(6,2);
  cantidad_descontada NUMBER(6,2):= 0;
BEGIN
  OPEN c1(200, TO_DATE('04/01/2018'));
    LOOP
      FETCH c1 INTO numero, cli, fpedido, total;
      EXIT WHEN c1%NOTFOUND;

      IF total > 500 THEN
        dto:= 0.2;
      ELSE
        dto:= 0.1;
      END IF;

      total_descuento:= total - total * dto;
      cantidad_descontada:= cantidad_descontada + total_descuento;

      UPDATE pedido
      SET total_pedido = total_pedido – total_descuento;
      WHERE pedido.npedido = numero;

      DBMS_OUTPUT.PUT_LINE('Pedido: ' || TO_CHAR(numero) || '
      tiene un ' || TO_CHAR(dto*100) || ' % de descuento adicional');
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Se ha descontado un total de: ' ||
    TO_CHAR(cantidad_descontada) );
    DBMS_OUTPUT.PUT_LINE('Se han actualizado ' || TO_CHAR(c1%ROWCOUNT)
    || 'pedidos' );
  CLOSE c1;
END;

----------------------------
Abriendo bucle for para recorrer cursor
---

DECLARE
  CURSOR c1 (importe_minimo NUMBER, fecha TIMESTAMP)
  IS SELECT npedido, cliente, fecha, total_pedido
  FROM pedido
  WHERE total_pedido > importe_minimo AND fecha = c1.fecha;
  
  dto NUMBER(3,2);
  total_descuento NUMBER(6,2);
  cantidad_descontada NUMBER(6,2):= 0;
  pedidos PLS_INTEGER;
BEGIN
  -- No se abre el cursos con OPEN
  -- Se abre implícitamente con FOR .. LOOP
  FOR rpedido IN c1(200, TO_DATE('04/01/2018')) LOOP
    IF rpedido.total > 500 THEN
      dto:= 0.2;
    ELSE
      dto:= 0.1;
    END IF;
    
    total_descuento:= rpedido.total – rpedido.total * dto;
    cantidad_descontada:= cantidad_descontada + total_descuento;
    
    UPDATE pedido
    SET total_pedido = total_pedido – total_descuento;
    WHERE pedido.npedido = rpedido.npedido;
    
    DBMS_OUTPUT.PUT_LINE('Pedido: ' || TO_CHAR(rpedido.npedido)
    || ' tiene un ' || TO_CHAR(dto*100) || ' % de descuento adicional');

    pedidos:= c1%ROWCOUNT;
  END LOOP;
  
  DBMS_OUTPUT.PUT_LINE('Se ha descontado un total de: ' ||
  TO_CHAR(cantidad_descontada) );
  DBMS_OUTPUT.PUT_LINE('Se han actualizado ' || TO_CHAR(pedidos) ||
  'pedidos' );
END;
